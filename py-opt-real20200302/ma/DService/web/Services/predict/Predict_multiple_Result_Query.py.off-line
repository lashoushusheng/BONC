#!/usr/bin/python
# -*- coding: utf-8 -*-
import json

from CConfig import conf
from DModel.Mysql_MA_DataSource import Mysql_MA_DataSource
from DModel.Mysql_MA_Predict import Mysql_MA_Predict
from DModel.Mysql_MA_Result import Mysql_MA_Result
from DModel.Mysql_MA_Train import Mysql_MA_Train
from DService.web.Services import DataServiceBaseHandler, mylog
from DService.web.Services.Optim_Public import Optim_Public
from DService.web.Services.Optim_Public_Predict import Optim_Public_Predict


class Predict_Query_multiple_Result_Handler(DataServiceBaseHandler):
    """
        查询-预测结果
    """
    def post(self):
        """
        """
        self.set_post_header()          # [设置]，请求头.
        reqData = self.request.body     # [取]，请求参数.
        mylog.info("[Predict_Query_multiple_Result.Request]...[%s]/[%s]" % (type(reqData), reqData))


        # [校验]，请求参数.
        errno, errMsg, reqDict = Optim_Public.verify_request(
            reqData=reqData,
            paramList=["modelType", "modelNames", "predictDataSourceName"]
        )
        mylog.info("[Predict_Query_multiple_Result.Verify]...errno=[%s]...errMsg=[%s]...reqDict=[%s]" % (
            errno, errMsg, reqDict
        ))
        if errno < 0:   # 校验异常，返回.
            self.write(json.dumps({"errorNo": errno, "errorMsg": errMsg}))
            return

        # [Mysql]，取[ma_predict]记录.
        # predictRow = Mysql_MA_Predict.find_by_model_names(
        predictRow = Mysql_MA_Result.find_result(
            modelType=reqDict["modelType"],
            modelNames=reqDict["modelNames"],
            dataSourceName=reqDict["predictDataSourceName"],
        )
        if not predictRow:  # 记录不存在，返回
            self.write(json.dumps({
                "errorNo": -1,
                "errorMsg": "模型预测记录不存在异常！"
            }))
            return

        # [Mysql]，取[ma_train]记录.
        # trainRow = Mysql_MA_Train.find_one(
        #     modelType=reqDict["modelType"],
        #     modelName=reqDict["modelNames"][0]
        # )
        # if not trainRow:  # 记录不存在，返回
        #     self.write(json.dumps({
        #         "errorNo": -1,
        #         "errorMsg": "模型训练记录不存在异常！"
        #     }))
        #     return

        # [Mysql]，取[ma_data_source]记录.
        trainDSRow = Mysql_MA_DataSource.find_one_by_id(
            dsId=predictRow[0].traindsId,
        )
        if not trainDSRow:  # 记录不存在，返回.
            self.write(json.dumps({
                "errorNo": -1,
                "errorMsg": "数据源记录不存在异常！"
            }))
            return

        print(trainDSRow.paramsJson)

        Result = []
        for row in predictRow:
            print(row.predictDir)
            predictResult = Optim_Public_Predict.fetch_predict_result(
                row.predictDir + r"/predict_result/\predict_result",
                mylog=mylog
            )
            Result.append({
                "modelName": row.modelName,
                "predictState": row.predictState,
                "modelParams": json.loads(row.modelParams),
                "predictResult": predictResult
            })

        data = json.dumps({
            "errorNo": 0,
            "errorMsg": "成功",
            "dataSourceParams":  json.loads(trainDSRow.paramsJson),
            "predictResult": Result
        })

        print(json.dumps(data))
        self.write(data)


